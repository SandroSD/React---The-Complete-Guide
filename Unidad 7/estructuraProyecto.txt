Hasta la unidad 6, usamos solo 2 componentes: App y Person.

App.js se puede separar un poco mas.


Stateless vs Stateful Components (functional components).

    Stateful(Containers)                    Stateless
- class XY extend Component               - const XY = (props) => {...}
- access to State (Yes)                   - access to State (No)
- lifecycle Hooks (Yes)                   - lifecycle Hooks (No)
- Access State and Props via "this        - Access Props via "props"
- this.state.XY & this.props.XY           - props.XY
- Use only if you need to manage          - Use in all other cases
    State or access to
    Lifecycle hooks!


Component Lifecycle (only available in Stateful Components!).

constructor(). 
componentWillMount().
componentWillReceiveProps().
shouldComponentUpdate().
componentWillUpdate().
componentDidUpdate().
componentDidCatch().
componentDidMount().
componentWillUnmount().
render().

Methods executed during creation.
    1- constructor().
    2- componentWillMount().
    3- componentDidMount().
    4- render().

-Process
    constructor(props)  -   Default ES6 class feature.
        Call super(props). DO: Set up State.    DON'T: Cause Side-Effects.
        If we do implement this method we do have to call super and pass on props,
        this calls the constructor of the parent class and since we can only implement
        method in stateful components, the parent class is this component object we 
        imported from react. And by calling super and passing on props thins like
        this.props which we then need to use anywhere else in the component get 
        populated or managed by react.
        So always call super and pass in props if you implement the constructor.
    
    componentWillMount()    -   Exists for historic reasons.
        DO: Update State, last minute optimization.     DON'T: Cause Side-Effects.
        This is a method defined by react and it is available because we extend that
        from the react library. componentWillMount exists for historic reasons mainly, 
        you don't really use it that often anymore.
        If you use it, you want to use it to update your state here, do some last minute
        optimizations but still you shouldn't cause side effects here, you shouldn't reach 
        out to the web. Now as i mentioned, you don't really use it that often anymore,
        it still exists but chances are you won't implement it in your application.
    
    render()    -   Prepare & Structure your JSX Code.
        Executing the render method does not mean that is accesses the real dom.
        Is an important step because it clearly defines how your application or how this
        component should look like from a html perspective.
        Here you prepare and structure your jsx code, defining which content gets render
        for this component.
    
    Render Child Components.

    componentDidMount()
    DO: Cause Side-Effects.     DON'T: Update State(triggers re-render).

    componentWillReceiveProps(nextProps)
    DO: Sync State to Props     DON'T: Cause Side-Effects

    Syncronize our local state of the component if we have one to the props. So initialize
    a state with the props so that we then later can change the state in that component but 
    get the base state depending on the outer props. If you don't need to syncronize this you
    probably don't need to implement this method.
    What you shouldn't do here is case side effects so don't reach out to the web and fetch 
    data or something  like that because this will lead to a re-rendering of the component 
    and hence to performance issues.

    shouldComponentUpdate(nextProps, nextState)     May cancel updating process!

    This is a method which may actually cancel the updating process, yu can decide if it should
    or not. Because if you return T here, the updating continues, if you return false, the updating
    stops. In all the other methods, you never return anything. But here you can return T or F and it 
    does have an impact.
    If you return false you're basically save performance because react doesn't need to go through the
    whole component tree and call render and so on but of course it may also show to your application 
    showing an incorrect state or basically having an incorrect DOM representation if you use this 
    in a wrong way.

    ComponentWillUpdate(nextProps, nextState)
    DO: Sync State to Props     DON'T: Cause Side-Effects

    There again you may sync your state to props and you shouldn't cause side effects. It might be the 
    better place to syncronize your state to props because unlike componentWillReceiveProps, here you 
    know that you're going to continue with the updating so you might not spend effort and resources 
    for something which then doesn't matter anyways.
    Once this has executed succesfully, you reached a render method again, hence rendering the jsx 
    and telling react what will actually be the result of your updated component.
    And there again as always, you should prepared and struture your jsx code.
    Thereafter react will go ahead and update all child components, all child components props to be 
    precise and that of course may trigger updates for the child components just as it did trigger an 
    update for  this component and then it would call componentDidUpdate at the end.
    There you may now cause side effects just like in DidMount, you mustn't update the state here
    though because this will trigger a re-render so it's basically comparable to componentDidMount just
    for the updating case.

    Video 89, tomar nota de los m√©todos lifecycle.

    Mirar desde el video 90.